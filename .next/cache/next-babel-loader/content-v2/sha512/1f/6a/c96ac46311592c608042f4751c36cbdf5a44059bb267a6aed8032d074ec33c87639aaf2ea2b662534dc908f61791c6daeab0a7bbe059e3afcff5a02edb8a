{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nconst eventsDirectory = path.join(process.cwd(), \"events\");\nexport function getSortedEventsData() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  const allEventsData = fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, \"\");\n    const fullPath = path.join(eventsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allEventsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n}\nexport async function getUpcomingEvent() {\n  const allEvents = getSortedEventsData();\n  return allEvents[0];\n}\nexport function getAllEventIds() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getEventData(id) {\n  const fullPath = path.join(eventsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}\nexport async function getCompleteSortedEventsData() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  const allEventsData = await Promise.all(fileNames.map(async fileName => {\n    const id = fileName.replace(/\\.md$/, \"\");\n    const fullPath = path.join(eventsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n    const matterResult = matter(fileContents);\n    const processedContent = await remark().use(html).process(matterResult.content);\n    const contentHtml = processedContent.toString();\n    return _objectSpread({\n      id,\n      contentHtml\n    }, matterResult.data);\n  }));\n  allEventsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return allEventsData;\n}\nexport async function getStaticProps() {\n  const allEventsData = getCompleteSortedEventsData();\n  return {\n    props: {\n      allPostsData: allEventsData\n    }\n  };\n}","map":{"version":3,"sources":["/Users/michaelungar/Documents/octagon-landing/lib/events.ts"],"names":["fs","path","matter","remark","html","eventsDirectory","join","process","cwd","getSortedEventsData","fileNames","readdirSync","allEventsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getUpcomingEvent","allEvents","getAllEventIds","params","getEventData","processedContent","use","content","contentHtml","toString","getCompleteSortedEventsData","Promise","all","getStaticProps","props","allPostsData"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,eAAe,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,QAAzB,CAAxB;AASA,OAAO,SAASC,mBAAT,GAA+B;AACpC,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,eAAf,CAAlB;AACA,QAAMO,aAAa,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAChD,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,eAAV,EAA2BS,QAA3B,CAAjB;AACA,UAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,UAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B;AACA;AACEH,MAAAA;AADF,OAEuCK,YAAY,CAACC,IAFpD;AAID,GATqB,CAAtB;AAUA,SAAOT,aAAa,CAACU,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAC,CAAR;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,eAAeC,gBAAf,GAAkC;AACvC,QAAMC,SAAS,GAAGlB,mBAAmB,EAArC;AACA,SAAOkB,SAAS,CAAC,CAAD,CAAhB;AACD;AAED,OAAO,SAASC,cAAT,GAA0B;AAC/B,QAAMlB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,eAAf,CAAlB;AACA,SAAOK,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AACjC,WAAO;AACLe,MAAAA,MAAM,EAAE;AACNd,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAec,YAAf,CAA4Bf,EAA5B,EAAwC;AAC7C,QAAME,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,eAAV,EAA4B,GAAEU,EAAG,KAAjC,CAAjB;AACA,QAAMG,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B;AACA,QAAMa,gBAAgB,GAAG,MAAM5B,MAAM,GAClC6B,GAD4B,CACxB5B,IADwB,EAE5BG,OAF4B,CAEpBa,YAAY,CAACa,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB;AACA;AACEpB,IAAAA,EADF;AAEEmB,IAAAA;AAFF,KAGMd,YAAY,CAACC,IAHnB;AAKD;AAED,OAAO,eAAee,2BAAf,GAAoE;AACzE,QAAM1B,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,eAAf,CAAlB;AACA,QAAMO,aAAa,GAAG,MAAMyB,OAAO,CAACC,GAAR,CAC1B5B,SAAS,CAACG,GAAV,CAAc,MAAOC,QAAP,IAAoB;AAChC,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,eAAV,EAA2BS,QAA3B,CAAjB;AACA,UAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,UAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B;AACA,UAAMa,gBAAgB,GAAG,MAAM5B,MAAM,GAClC6B,GAD4B,CACxB5B,IADwB,EAE5BG,OAF4B,CAEpBa,YAAY,CAACa,OAFO,CAA/B;AAGA,UAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB;AACA;AACEpB,MAAAA,EADF;AAEEmB,MAAAA;AAFF,OAGuCd,YAAY,CAACC,IAHpD;AAKD,GAdD,CAD0B,CAA5B;AAkBAT,EAAAA,aAAa,CAACU,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3B,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAC,CAAR;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;AAQA,SAAOb,aAAP;AACD;AAED,OAAO,eAAe2B,cAAf,GAAgC;AACrC,QAAM3B,aAAa,GAAGwB,2BAA2B,EAAjD;AACA,SAAO;AACLI,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE7B;AADT;AADF,GAAP;AAKD","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\n\nconst eventsDirectory = path.join(process.cwd(), \"events\");\n\nexport interface IEventData {\n  id: string;\n  contentHtml: string;\n  date: string;\n  title: string;\n}\n\nexport function getSortedEventsData() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  const allEventsData = fileNames.map((fileName) => {\n    const id = fileName.replace(/\\.md$/, \"\");\n    const fullPath = path.join(eventsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n    const matterResult = matter(fileContents);\n    return {\n      id,\n      ...(<{ date: string; title: string }>matterResult.data),\n    };\n  });\n  return allEventsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n}\n\nexport async function getUpcomingEvent() {\n  const allEvents = getSortedEventsData();\n  return allEvents[0];\n}\n\nexport function getAllEventIds() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  return fileNames.map((fileName) => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\"),\n      },\n    };\n  });\n}\n\nexport async function getEventData(id: string) {\n  const fullPath = path.join(eventsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const matterResult = matter(fileContents);\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return {\n    id,\n    contentHtml,\n    ...(matterResult.data as { date: string; title: string }),\n  };\n}\n\nexport async function getCompleteSortedEventsData(): Promise<IEventData[]> {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  const allEventsData = await Promise.all(\n    fileNames.map(async (fileName) => {\n      const id = fileName.replace(/\\.md$/, \"\");\n      const fullPath = path.join(eventsDirectory, fileName);\n      const fileContents = fs.readFileSync(fullPath, \"utf8\");\n      const matterResult = matter(fileContents);\n      const processedContent = await remark()\n        .use(html)\n        .process(matterResult.content);\n      const contentHtml = processedContent.toString();\n      return {\n        id,\n        contentHtml,\n        ...(<{ date: string; title: string }>matterResult.data),\n      };\n    })\n  );\n\n  allEventsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n\n  return allEventsData;\n}\n\nexport async function getStaticProps() {\n  const allEventsData = getCompleteSortedEventsData();\n  return {\n    props: {\n      allPostsData: allEventsData,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}