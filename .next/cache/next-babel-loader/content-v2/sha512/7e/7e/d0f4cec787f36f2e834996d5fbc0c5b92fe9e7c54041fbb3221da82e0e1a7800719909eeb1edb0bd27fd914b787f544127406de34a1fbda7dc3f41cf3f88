{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nconst eventsDirectory = path.join(process.cwd(), \"events\");\nexport function getSortedEventsData() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  const allEventsData = fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, \"\");\n    const fullPath = path.join(eventsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allEventsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n}\nexport async function getUpcomingEvent() {\n  const allEvents = getSortedEventsData();\n  return allEvents[0];\n}\nexport function getAllEventIds() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getEventData(id) {\n  const fullPath = path.join(eventsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}\nexport async function getCompleteSortedEventsData() {\n  const fileNames = fs.readdirSync(eventsDirectory);\n  const allEventsData = await Promise.all(fileNames.map(async fileName => {\n    const id = fileName.replace(/\\.md$/, \"\");\n    const fullPath = path.join(eventsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n    const matterResult = matter(fileContents);\n    const processedContent = await remark().use(html).process(matterResult.content);\n    const contentHtml = processedContent.toString();\n    return _objectSpread({\n      id,\n      contentHtml\n    }, matterResult.data);\n  }));\n  allEventsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return allEventsData;\n}\nexport async function getStaticProps() {\n  const allEventsData = getCompleteSortedEventsData();\n  return {\n    props: {\n      allPostsData: allEventsData\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}