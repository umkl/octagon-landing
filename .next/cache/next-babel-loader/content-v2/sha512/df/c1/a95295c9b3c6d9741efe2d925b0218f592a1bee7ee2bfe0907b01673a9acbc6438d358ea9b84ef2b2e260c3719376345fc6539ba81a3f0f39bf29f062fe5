{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nvar useObserver = function useObserver(_ref) {\n  var callback = _ref.callback,\n      element = _ref.element;\n  var current = element && element.current;\n  var observer = useRef(null);\n  useEffect(function () {\n    // if we are already observing old element\n    if (observer && observer.current && current) {\n      observer.current.unobserve(current);\n    }\n\n    var resizeObserverOrPolyfill = ResizeObserver;\n    observer.current = new resizeObserverOrPolyfill(callback);\n    observe();\n    return function () {\n      if (observer && observer.current && element && element.current) {\n        observer.current.unobserve(element.current);\n      }\n    };\n  }, [current]);\n\n  var observe = function observe() {\n    if (element && element.current && observer.current) {\n      observer.current.observe(element.current);\n    }\n  };\n};\n\nuseObserver.propTypes = {\n  element: PropTypes.object,\n  callback: PropTypes.func\n};\nexport default useObserver;","map":null,"metadata":{},"sourceType":"module"}