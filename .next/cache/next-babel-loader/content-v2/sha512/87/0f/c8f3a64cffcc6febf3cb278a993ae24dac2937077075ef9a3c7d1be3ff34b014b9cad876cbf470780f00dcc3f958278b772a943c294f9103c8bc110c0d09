{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nvar useObserver = function useObserver(_ref) {\n  _s();\n\n  var callback = _ref.callback,\n      element = _ref.element;\n  var current = element && element.current;\n  var observer = useRef(null);\n  useEffect(function () {\n    // if we are already observing old element\n    if (observer && observer.current && current) {\n      observer.current.unobserve(current);\n    }\n\n    var resizeObserverOrPolyfill = ResizeObserver;\n    observer.current = new resizeObserverOrPolyfill(callback);\n    observe();\n    return function () {\n      if (observer && observer.current && element && element.current) {\n        observer.current.unobserve(element.current);\n      }\n    };\n  }, [current]);\n\n  var observe = function observe() {\n    if (element && element.current && observer.current) {\n      observer.current.observe(element.current);\n    }\n  };\n};\n\n_s(useObserver, \"mvUvGhiqkPzCYiMPAW/Py9ym/ZY=\");\n\nuseObserver.propTypes = {\n  element: PropTypes.object,\n  callback: PropTypes.func\n};\nexport default useObserver;","map":{"version":3,"sources":["/Users/michaelungar/Documents/octagon-landing/hooks/useObserver.ts"],"names":["useEffect","useRef","PropTypes","ResizeObserver","useObserver","callback","element","current","observer","unobserve","resizeObserverOrPolyfill","observe","propTypes","object","func"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAA2B;AAAA;;AAAA,MAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAE7C,MAAMC,OAAO,GAAGD,OAAO,IAAIA,OAAO,CAACC,OAAnC;AAEA,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA,QAAIQ,QAAQ,IAAIA,QAAQ,CAACD,OAArB,IAAgCA,OAApC,EAA6C;AAC3CC,MAAAA,QAAQ,CAACD,OAAT,CAAiBE,SAAjB,CAA2BF,OAA3B;AACD;;AACD,QAAMG,wBAAwB,GAAIP,cAAlC;AACAK,IAAAA,QAAQ,CAACD,OAAT,GAAmB,IAAIG,wBAAJ,CAA6BL,QAA7B,CAAnB;AACAM,IAAAA,OAAO;AAEP,WAAO,YAAM;AACX,UAAIH,QAAQ,IAAIA,QAAQ,CAACD,OAArB,IAAgCD,OAAhC,IACDA,OAAO,CAACC,OADX,EACoB;AAClBC,QAAAA,QAAQ,CAACD,OAAT,CAAiBE,SAAjB,CAA2BH,OAAO,CAACC,OAAnC;AACD;AACF,KALD;AAMH,GAfQ,EAeN,CAACA,OAAD,CAfM,CAAT;;AAiBA,MAAMI,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QAAIL,OAAO,IAAIA,OAAO,CAACC,OAAnB,IAA8BC,QAAQ,CAACD,OAA3C,EAAoD;AAClDC,MAAAA,QAAQ,CAACD,OAAT,CAAiBI,OAAjB,CAAyBL,OAAO,CAACC,OAAjC;AACD;AACF,GAJD;AAMD,CA7BD;;GAAMH,W;;AA+BNA,WAAW,CAACQ,SAAZ,GAAwB;AACtBN,EAAAA,OAAO,EAAEJ,SAAS,CAACW,MADG;AAEtBR,EAAAA,QAAQ,EAAEH,SAAS,CAACY;AAFE,CAAxB;AAKA,eAAeV,WAAf","sourcesContent":["import { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nconst useObserver = ({ callback, element }) => {\n\n  const current = element && element.current;\n\n  const observer = useRef(null);\n\n  useEffect(() => {\n      // if we are already observing old element\n      if (observer && observer.current && current) {\n        observer.current.unobserve(current);\n      }\n      const resizeObserverOrPolyfill =  ResizeObserver;\n      observer.current = new resizeObserverOrPolyfill(callback);\n      observe();\n\n      return () => {\n        if (observer && observer.current && element &&\n           element.current) {\n          observer.current.unobserve(element.current);\n        }\n      };\n  }, [current]);\n\n  const observe = () => {\n    if (element && element.current && observer.current) {\n      observer.current.observe(element.current);\n    }\n  };\n\n};\n\nuseObserver.propTypes = {\n  element: PropTypes.object,\n  callback: PropTypes.func,\n};\n\nexport default useObserver;"]},"metadata":{},"sourceType":"module"}